<%= stylesheet_link_tag "http://twitter.github.com/bootstrap/assets/js/google-code-prettify/prettify.css" %>
<%= javascript_include_tag "http://twitter.github.com/bootstrap/assets/js/google-code-prettify/prettify.js" %>

<script type="text/javascript">
    window.onload = function() { prettyPrint(); }
</script>

<div class="container">
    <div class="row">

        <div class="span3">
            <div class="span3 bs-docs-sidebar">
                <ul class="nav nav-list bs-docs-sidenav affix">
                    <li class=""><a href="#overview"><i class="icon-chevron-right"></i> Overview</a></li>
                    <li><a href="#config"><i class="icon-chevron-right"></i> Configuration</a></li>
                    <li><a href="#log4j-appender"><i class="icon-chevron-right"></i> Log4J Appender</a></li>
                    <li><a href="#api"><i class="icon-chevron-right"></i> API</a></li>
                </ul>
            </div>
        </div>

        <div class="span9">
            <section id="overview">
                <div class="page-header"><h1>Overview</h1></div>

                <p>As described by <a href="http://en.wikipedia.org/wiki/Kiln">Wikipedia</a>, KILN is...</p>

                <blockquote>
                    A kiln is a thermally insulated chamber, or oven, in which a controlled temperature regime is produced. Uses include the hardening, burning or drying of materials. Kilns are also used for the firing of materials, such as clay and other raw materials, to form ceramics (including pottery, bricks etc.)
                </blockquote>

                <p>
                    Kiln is an open source platform for log aggregation, visualization and analysis. The goal of Kiln is to provide a one stop log visualization platform that provides engineers, managers, and other stakeholders access to log files for multiple applications and environments without the hassle of having to tail log files or browse complex directory structures on remote repositories such as the ones generated by applications deployed on Elastic Beanstalk.
                </p>

                <p>
                    Installing and deploying Kiln is easy, and publishing to Kiln is even easier. Kiln stores all of its data on database (<b>MongoDB</b>) enabling you to establish backup and storage policies that best fit your needs.
                </p>

                <p>
                    The source code for Kiln may be checked out from <a href="https://github.com/rcracel/Kiln">GitHub</a>.
                </p>

            </section>

            <section id="config">
                <div class="page-header"><h1>Server Configuration</h1></div>

                <p>
                    Kiln comes pre-configured with basic settings and ready to deploy. While intent is to have administrators configure Kiln from the application itself, we currently only support configuration changes through modifications to a few text files. In order to customize Kiln, you may modify the following configuration files, relative to the application root:
                </p>

                <h4>config/kiln.yml</h4>
                <dl>
                    <dt>[environemnt]:allow_new_users</dt>
                    <dd>
                        Determines where the application allows new users to register. If set to false only existing users will have access to the application. You can use this option to prevent unauthorized users to see your log files.
                    </dd>
                </dl>

                <h4>config/mongo.yml</h4>
                <dl>
                    <dt>[environment]:host</dt>
                    <dd>
                        The hostname or IP address of your MongoDB instance.
                    </dd>
                </dl>

                <dl>
                    <dt>[environment]:port</dt>
                    <dd>
                        The port used to connect to your MongoDB instance.
                    </dd>
                </dl>

                <dl>
                    <dt>[environment]:database</dt>
                    <dd>
                        The name of the database you want to use for storing the log events.
                    </dd>
                </dl>

                <dl>
                    <dt>[environment]:username</dt>
                    <dd>
                        The username used to connect to your MongoDB instance. We recommend you leave this as an environment variable for easier configuration.
                    </dd>
                </dl>

                <dl>
                    <dt>[environment]:password</dt>
                    <dd>
                        The password used to connect to your MongoDB instance. We recommend you leave this as an environment variable for easier configuration.
                    </dd>
                </dl>

            </section>

            <section id="log4j-appender">
                <div class="page-header"><h1>Log4J Appender</h1></div>

                <p>
                    If you are using Maven with Java or another JVM based languange, you can add a dependency to the Kiln adapter to your application, and usually through a simple configuration line push log events to your Kiln instance.
                </p>

                <h3>Maven</h3>

                <h4>pom.xml</h4>
                <pre class="prettyprint linenums languague-xml">
&lt;dependency&gt;
    &lt;groupId&gt;com.nevermindsoft&lt;/groupId&gt;
    &lt;artifactId&gt;kiln-adaptor-java&lt;/artifactId&gt;
    &lt;version&gt;1.6&lt;/version&gt;
&lt;/dependency&gt;</pre>

                <h3>Grails</h3>

                <h4>BuildConfig.groovy<h4>
                <pre class="prettyprint linenums languague-java">
dependencies {
    runtime 'com.nevermindsoft:kiln-adaptor-java:1.6'
    ....
}</pre>
                <h4>Config.groovy</h4>
                <pre class="prettyprint linenums languague-java">
log4j = {
    appenders {
        ....
        appender    new com.nevermindsoft.kiln.RemoteServiceAppender(
                name:            "remote",
                moduleName:      "My Module Name",
                apiKey:          "get-key-from-kiln",
                environmentName: grails.util.Environment.current.getName(),
                serverUrl:       "http://my.url/api/events/publish",
                maxRequestItems: 200,
                sleepTime:       5000
        )
    }

    ...

    root {
        info  'remote'
        ...
    }
}

</pre>
            </section>

            <section id="api">
                <div class="page-header"><h1>Restful API</h1></div>

                <p>
                    Kiln's provides a restful JSON based api that can be used to gain access to repository functionality. You can use the API methods specified below to write new appender for additional programming languages, generate external reports, or even add monitors to notify stakeholders of potential risks from application errors or intrusion attempts.
                </p>


                <h3>/api/events/publish</h3>

                <p>
                    This method allows you to publish event logs to the repository. You will need to <a href="<%= applications_url %>"> create an application</a> and use the provided API Key to connect to Kiln.
                </p>

                <dl>
                    <dt>module_name</dt>
                    <dd>The name of the application module publishing this log event. This is usually a qualified stand alone part of your application or application suite. <em>(optional)</em></dd>

                    <dt>log_level</dt>
                    <dd>The log level for this event. Examples are INFO, WARN, ERROR. <em>(optional)</em></dd>

                    <dt>message</dt>
                    <dd>The textual message for the log event.</dd>

                    <dt>timestamp</dt>
                    <dd>The timestamp for the log event. The format is %m/%d/%Y %H:%M:%S %z. <em>(optional)</em></dd>

                    <dt>thread_name</dt>
                    <dd>The name of the application thread where the log event originated. This is helpful for detecting which worker thread on a multi-threaded application has generated the log. <em>(optional)</em></dd>

                    <dt>stack_trace</dt>
                    <dd>A string representation of the stack trace associated with the log event. This is useful for capturing exception stack traces for errors. <em>(optional)</em></dd>

                    <dt>environment_name</dt>
                    <dd>The name of the environment where the log event originated. This is useful to differentiate between development, staging, production or any other environments you may be maintaining concurrently on your project. <em>(optional)</em></dd>
                </dl>

                <h4>Example request payload</h4>
                <pre class="prettyprint linenums languague-javascript">
{
    api_key: "xxx-xxx-xxx",
    events: [
        {
            "module_name" : "Bulk Email Processor",
            "log_level" : "INFO",
            "message" : "Application Successfully Initialized",
            "timestamp" : "12/21/2012 04:33:12 -5:00",
            "thread_name" : "MainThread",
            "environment_name" : "staging"
        },
        {
            "module_name" : "Bulk Email Processor",
            "log_level" : "WARN",
            "message" : "Found unprocessed outbound messages, please ensure proper shutdown to prevent message loss.",
            "timestamp" : "12/21/2012 04:51:12 -5:00",
            "thread_name" : "WorkerThread-01",
            "environment_name" : "staging"
        }
    ]
}
                </pre>

            </section>

        </div>

    </div>

</div>